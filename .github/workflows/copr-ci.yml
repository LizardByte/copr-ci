---
name: CI Copr Call
permissions:
  contents: read

on:
  workflow_call:
    inputs:
      copr_pr_webhook_token:
        description: 'Copr PR webhook key. This should not be secret if you want it to work for PRs from forks.'
        required: true
        type: string
      github_org_owner:
        description: 'GitHub organization owner. This will prevent user forks from triggering the workflow.'
        required: true
        type: string
      copr_ownername:
        description: 'User or group name.'
        required: true
        type: string
      auto_update_package:
        description: 'Automatically create/update a package in Copr.'
        required: false
        type: boolean
        default: true
      job_timeout:
        description: 'Job timeout in minutes.'
        required: false
        type: number
        default: 60
      download_version:
        description: |
          Download an existing build by version number instead of creating a new build.
          When provided, build and package-init jobs will be skipped.
          Example: 2025.703.161609
        required: false
        type: string
    secrets:
      COPR_BETA_WEBHOOK_TOKEN:
        description: 'Copr beta webhook token. This should be a secret.'
        required: true
      COPR_STABLE_WEBHOOK_TOKEN:
        description: 'Copr stable webhook token. This should be a secret.'
        required: true
      COPR_CLI_CONFIG:
        description: 'Copr CLI configuration file. See https://copr.fedorainfracloud.org/api'
        required: true

jobs:
  package-init:
    name: Create/update copr package
    runs-on: ubuntu-latest
    container: fedora:latest
    if: inputs.download_version == ''
    env:
      BASE_URL: https://copr.fedorainfracloud.org/api_3
      OWNERNAME: ${{ inputs.copr_ownername }}
      PACKAGE_NAME: ${{ github.event.repository.name }}
      SOURCE_TYPE_TEXT: "custom"
    steps:
      - name: Debug inputs
        run: |
          echo "inputs:"
          echo "copr_pr_webhook_token: ${{ inputs.copr_pr_webhook_token }}"
          echo "github_org_owner: ${{ inputs.github_org_owner }}"
          echo "copr_ownername: ${{ inputs.copr_ownername }}"
          echo "auto_update_package: ${{ inputs.auto_update_package }}"
          echo "job_timeout: ${{ inputs.job_timeout }}"
          echo "download_version: ${{ inputs.download_version }}"

      - name: Test secrets
        id: test_secrets
        if: >
          github.repository_owner == inputs.github_org_owner &&
          inputs.auto_update_package == true
        run: |
          # return if secrets.COPR_CLI_CONFIG is empty
          if [ -z "${{ secrets.COPR_CLI_CONFIG }}" ]; then
            echo "Copr CLI configuration file is empty. Exiting..."

            # if a pull request exit with 0
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "SKIP_REMAINING_JOBS=true" >> $GITHUB_OUTPUT
            else
              exit 1
            fi
          else
            mkdir -p ~/.config
            echo "${{ secrets.COPR_CLI_CONFIG }}" > ~/.config/copr
          fi

      - name: Install dependencies
        if: steps.test_secrets.outputs.SKIP_REMAINING_JOBS != 'true'
        run: |
          dnf install -y \
            copr-cli \
            jq

      - name: create packages
        if: steps.test_secrets.outputs.SKIP_REMAINING_JOBS != 'true'
        run: |
          projects=(
            "pulls"
            "beta"
            "stable"
          )

          # download the latest copr-ci.sh script
          curl https://raw.githubusercontent.com/lizardbyte/copr-ci/master/copr-ci.sh > copr-ci.sh

          # set parameters for package creation
          script="copr-ci.sh"

          builddeps="git jq python3"
          resultdir=""
          chroot="fedora-latest-x86_64"

          for project in "${projects[@]}"; do
            # check if 404 on get package (package does not exist)
            url="${BASE_URL}/package?ownername=${OWNERNAME}&projectname=${project}&packagename=${PACKAGE_NAME}"
            status_code=$(curl --write-out %{http_code} --silent --output /dev/null $url)

            if [[ "$status_code" == 404 ]]; then
              echo "Creating package for ${project}..."
              command="add-package-custom"
            else
              echo "Editing package for ${project}..."
              command="edit-package-custom"
            fi

            copr-cli \
              ${command} \
              --script "${script}" \
              --script-builddeps "${builddeps}" \
              --script-resultdir "${resultdir}" \
              --script-chroot "${chroot}" \
              --name "${PACKAGE_NAME}" \
              --timeout $((60 * ${{ inputs.job_timeout }})) \
              ${project}

          done

  build:
    name: Copr build
    needs: package-init
    if: >-
      github.repository_owner == inputs.github_org_owner &&
      inputs.download_version == ''
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.job_timeout }}
    outputs:
      BUILD_ID: ${{ steps.build.outputs.BUILD_ID }}
      BUILD_CANCEL: ${{ steps.build.outcome == 'cancelled' }}
      BUILD_SUCCESS: ${{ steps.build.outcome == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get properties
        env:
          COPR_PR_WH_TOKEN: ${{ inputs.copr_pr_webhook_token }}
        run: |
          # package name = repository name
          package=${{ github.event.repository.name }}
          copr_base="https://copr.fedorainfracloud.org/webhooks/custom-dir/${{ inputs.copr_ownername }}"

          # release and released type
          if [ "${{ github.event_name }}" = "release" ]; then
            if [ "${{ github.event.action }}" = "prereleased" ]; then
              COPR_PUSH_WEBHOOK="${copr_base}/beta/${{ secrets.COPR_BETA_WEBHOOK_TOKEN }}/${package}/"
            elif [ "${{ github.event.action }}" = "released" ]; then
              COPR_PUSH_WEBHOOK="${copr_base}/stable/${{ secrets.COPR_STABLE_WEBHOOK_TOKEN }}/${package}/"
            fi
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            COPR_PR_WEBHOOK="${copr_base}/pulls:pr:${{ github.event.number }}/${{ env.COPR_PR_WH_TOKEN }}/${package}/"
          fi

          echo "COPR_PUSH_WEBHOOK=${COPR_PUSH_WEBHOOK}" >> $GITHUB_ENV
          echo "COPR_PR_WEBHOOK=${COPR_PR_WEBHOOK}" >> $GITHUB_ENV

          echo "COPR_PUSH_WEBHOOK=${COPR_PUSH_WEBHOOK}"
          echo "COPR_PR_WEBHOOK=${COPR_PR_WEBHOOK}"

      - name: Build
        id: build
        run: |
          curl https://raw.githubusercontent.com/reenignearcher/copr-ci-tooling/patch-1/copr-gh-actions-submit > submit
          # curl https://raw.githubusercontent.com/praiskup/copr-ci-tooling/main/copr-gh-actions-submit > submit

          # if a PR number is added the script will use the PR webhook, otherwise it will use the push webhook
          bash submit ${{ github.event.pull_request.number }}

  cancel-build:
    name: Cancel build
    needs: build
    if: |
      always() &&
      needs.build.outputs.BUILD_CANCEL == 'true' &&
      inputs.download_version == ''
    runs-on: ubuntu-latest
    container: fedora:latest
    steps:
      - name: Install dependencies
        run: |
          dnf install -y \
            copr-cli

      - name: Cancel Copr build
        run: |
          if [ -n "${{ secrets.COPR_CLI_CONFIG }}" ]; then
            mkdir -p ~/.config
            echo "${{ secrets.COPR_CLI_CONFIG }}" > ~/.config/copr

            copr-cli \
              cancel \
              ${{ needs.build.outputs.BUILD_ID }}
          else
            echo "Cannot cancel Copr build. No Copr CLI configuration file found. This is likely a PR from a fork."
            exit 1
          fi

  download-build:
    name: Download build
    if: |
      always() &&
      (
        (needs.build.outputs.BUILD_SUCCESS == 'true' && inputs.download_version == '') ||
        (inputs.download_version != '')
      )
    needs: build
    runs-on: ubuntu-latest
    container: fedora:latest
    steps:
      - name: Install dependencies
        run: |
          dnf install -y \
            copr-cli \
            nodejs \
            zip \
            jq

      - name: Setup Copr CLI config
        if: inputs.download_version != ''
        run: |
          if [ -n "${{ secrets.COPR_CLI_CONFIG }}" ]; then
            mkdir -p ~/.config
            echo "${{ secrets.COPR_CLI_CONFIG }}" > ~/.config/copr
          else
            echo "Cannot download build. No Copr CLI configuration file found."
            exit 1
          fi

      - name: Find and wait for build
        if: inputs.download_version != ''
        run: |
          VERSION="${{ inputs.download_version }}-1"
          PACKAGE_NAME="${{ github.event.repository.name }}"
          OWNERNAME="${{ inputs.copr_ownername }}"
          PROJECT="beta"

          echo "Looking for build with version: ${VERSION}"
          echo "Searching in project: ${PROJECT}"

          # Find build ID by version
          BUILD_ID=""
          echo "Fetching builds from copr-cli..."
          builds=$(copr-cli list-builds --output-format json "${OWNERNAME}/${PROJECT}")

          echo "Raw builds output (first 1000 chars):"
          echo "$builds" | head -c 1000
          echo ""
          echo "..."

          echo "Number of builds found:"
          echo "$builds" | jq '. | length'

          echo "Build details for package ${PACKAGE_NAME}:"
          echo "$builds" | jq --arg package "$PACKAGE_NAME" '
            .[] | select(.source_package.name == $package) | {
              id: .id,
              package_name: .source_package.name,
              version: .source_package.version,
              state: .state
            }
          '

          echo "Checking for version matches with ${VERSION}:"
          echo "$builds" | jq --arg version "${VERSION}" --arg package "$PACKAGE_NAME" '
            .[] | select(.source_package.name == $package) | select(.source_package.version | startswith($version)) | {
              id: .id,
              package_name: .source_package.name,
              version: .source_package.version,
              matches: true
            }
          '

          BUILD_ID=$(echo "$builds" | jq -r --arg version "${VERSION}" --arg package "$PACKAGE_NAME" '
            .[] | select(.source_package.name == $package and (.source_package.version | startswith($version))) | .id | tostring
          ' | head -n1)

          echo "Final BUILD_ID result: '${BUILD_ID}'"

          if [ -z "${BUILD_ID}" ] || [ "${BUILD_ID}" = "null" ]; then
            echo "No build found for version ${VERSION} in project ${PROJECT}"
            exit 1
          fi

          echo "Found build ID: ${BUILD_ID}"
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV

          # Wait for build to complete
          echo "Waiting for build to complete..."
          while true; do
            status=$(copr-cli get-build "${BUILD_ID}" --output-format json | jq -r '.state')
            echo "Build status: $status"

            case "$status" in
              "succeeded")
                echo "Build completed successfully"
                break
                ;;
              "failed"|"canceled"|"skipped")
                echo "Build failed with status: $status"
                exit 1
                ;;
              "running"|"pending"|"starting"|"importing")
                echo "Build still in progress, waiting 30 seconds..."
                sleep 30
                ;;
              *)
                echo "Unknown build status: $status"
                exit 1
                ;;
            esac
          done

      - name: Download build
        run: |
          # Use provided version's build ID or the one from the build job
          if [ -n "${{ inputs.download_version }}" ]; then
            BUILD_ID="${BUILD_ID}"
          else
            BUILD_ID="${{ needs.build.outputs.BUILD_ID }}"
          fi

          echo "Downloading build ID: ${BUILD_ID}"

          mkdir -p artifacts
          copr-cli \
            download-build \
            --dest . \
            --rpms \
            ${BUILD_ID}

      - name: Setup gh actions artifact client
        uses: lhotari/gh-actions-artifact-client@v2

      - name: Upload artifacts
        run: |
          find . -type f -name "*.rpm" ! -name "*.src.rpm" | while read -r file; do
            name=build-$(basename "$file")
            echo "Uploading $name, file: $file"
            zip - "$file" | gh-actions-artifact-client.js upload "${name}" --retentionDays=7
          done
